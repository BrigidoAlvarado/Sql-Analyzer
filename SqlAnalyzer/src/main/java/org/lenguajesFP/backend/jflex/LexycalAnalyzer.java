/* The following code was generated by JFlex 1.7.0 */

package org.lenguajesFP.backend.jflex;

//Seccion de imports
import java.util.ArrayList;
import java.util.List;
import java.awt.Color;

import org.lenguajesFP.backend.Token;
import org.lenguajesFP.backend.ErrorToken;
import org.lenguajesFP.backend.enums.Kind;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lexer.jflex</tt>
 */
public class LexycalAnalyzer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\2\42\1\46\1\50\1\50\1\42\22\0\1\45\6\0\1\41"+
    "\1\32\1\32\1\35\1\35\1\32\1\36\1\33\1\35\12\40\1\0"+
    "\1\32\1\37\1\34\1\37\2\0\1\4\1\7\1\1\1\6\1\3"+
    "\1\22\1\24\1\30\1\17\1\31\1\12\1\11\1\20\1\14\1\23"+
    "\1\16\1\21\1\2\1\10\1\5\1\15\1\26\1\27\1\25\1\13"+
    "\1\47\4\0\1\44\1\0\32\43\12\0\1\50\u1fa2\0\1\50\1\50"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\26\2\1\3\2\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\11\6\2\1\12\12\2\1\12\21\2"+
    "\1\13\4\2\1\0\1\5\3\0\1\14\1\10\10\2"+
    "\1\13\1\15\34\2\1\0\1\16\1\0\10\2\1\17"+
    "\1\20\17\2\1\21\1\0\14\2\1\0\6\2\1\0"+
    "\2\2\1\0\1\2\4\0\1\22";

  private static int [] zzUnpackAction() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\u011f"+
    "\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e\0\u0267"+
    "\0\u0290\0\u02b9\0\u02e2\0\u030b\0\u0334\0\u035d\0\u0386\0\u03af"+
    "\0\51\0\51\0\u03d8\0\u0401\0\u042a\0\u0453\0\51\0\u047c"+
    "\0\51\0\u04a5\0\u04ce\0\u04f7\0\u0520\0\u0549\0\u0572\0\u059b"+
    "\0\u05c4\0\u05ed\0\u0616\0\u063f\0\u0668\0\u0691\0\u06ba\0\u06e3"+
    "\0\u070c\0\u0735\0\u01ec\0\u075e\0\u0787\0\u07b0\0\u07d9\0\u0802"+
    "\0\u082b\0\u0854\0\u087d\0\u08a6\0\u08cf\0\u08f8\0\u0921\0\u094a"+
    "\0\u0973\0\u099c\0\u09c5\0\u09ee\0\u0a17\0\u0a40\0\u0a69\0\u0a92"+
    "\0\u0abb\0\u0ae4\0\51\0\u0b0d\0\u0b36\0\u0b5f\0\51\0\u0b88"+
    "\0\u0bb1\0\u0bda\0\u0c03\0\u0c2c\0\u0c55\0\u0c7e\0\u0ca7\0\u0cd0"+
    "\0\u01ec\0\u01ec\0\u0cf9\0\u0d22\0\u0d4b\0\u0d74\0\u0d9d\0\u0dc6"+
    "\0\u059b\0\u0def\0\u0e18\0\u0e41\0\u0e6a\0\u0e93\0\u0ebc\0\u0ee5"+
    "\0\u0f0e\0\u0f37\0\u0f60\0\u0f89\0\u0fb2\0\u0fdb\0\u1004\0\u102d"+
    "\0\u1056\0\u107f\0\u10a8\0\u10d1\0\u10fa\0\u1123\0\u114c\0\u0b0d"+
    "\0\u1175\0\u119e\0\u11c7\0\u11f0\0\u1219\0\u1242\0\u126b\0\u1294"+
    "\0\u12bd\0\u01ec\0\u01ec\0\u12e6\0\u130f\0\u1338\0\u1361\0\u138a"+
    "\0\u13b3\0\u13dc\0\u1405\0\u142e\0\u1457\0\u1480\0\u14a9\0\u14d2"+
    "\0\u14fb\0\u1524\0\51\0\u154d\0\u1576\0\u159f\0\u15c8\0\u15f1"+
    "\0\u161a\0\u1643\0\u166c\0\u1695\0\u16be\0\u16e7\0\u1710\0\u1739"+
    "\0\u1762\0\u178b\0\u17b4\0\u17dd\0\u1806\0\u182f\0\u1858\0\u1881"+
    "\0\u18aa\0\u18d3\0\u18fc\0\u1925\0\u194e\0\u1977\0\u19a0\0\u19c9"+
    "\0\51";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\15\1\23\1\24\1\25\1\15\1\26\1\27"+
    "\1\15\1\30\3\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\2\2\37\1\15\1\41\52\0\1\15"+
    "\1\42\1\15\1\43\16\15\1\44\6\15\11\0\1\15"+
    "\3\0\1\15\2\0\2\15\1\45\26\15\11\0\1\15"+
    "\3\0\1\15\2\0\24\15\1\46\4\15\11\0\1\15"+
    "\3\0\1\15\2\0\5\15\1\47\1\15\1\50\1\51"+
    "\2\15\1\52\11\15\1\53\3\15\11\0\1\15\3\0"+
    "\1\15\2\0\1\15\1\54\1\55\1\56\6\15\1\57"+
    "\16\15\11\0\1\15\3\0\1\15\2\0\1\15\1\60"+
    "\1\61\1\62\25\15\11\0\1\15\3\0\1\15\2\0"+
    "\12\15\1\63\3\15\1\64\3\15\1\65\6\15\11\0"+
    "\1\15\3\0\1\15\2\0\2\15\1\66\11\15\1\67"+
    "\14\15\11\0\1\15\3\0\1\15\2\0\16\15\1\70"+
    "\12\15\11\0\1\15\3\0\1\15\2\0\2\15\1\71"+
    "\26\15\11\0\1\15\3\0\1\15\2\0\31\15\11\0"+
    "\1\15\3\0\1\15\2\0\14\15\1\72\5\15\1\73"+
    "\6\15\11\0\1\15\3\0\1\15\2\0\13\15\1\74"+
    "\1\15\1\75\13\15\11\0\1\15\3\0\1\15\2\0"+
    "\1\15\1\76\27\15\11\0\1\15\3\0\1\15\2\0"+
    "\13\15\1\77\5\15\1\63\7\15\11\0\1\15\3\0"+
    "\1\15\2\0\3\15\1\100\12\15\1\101\12\15\11\0"+
    "\1\15\3\0\1\15\2\0\1\15\1\102\1\15\1\103"+
    "\16\15\1\104\6\15\11\0\1\15\3\0\1\15\2\0"+
    "\1\15\1\105\11\15\1\63\15\15\11\0\1\15\3\0"+
    "\1\15\2\0\1\15\1\106\27\15\11\0\1\15\3\0"+
    "\1\15\2\0\3\15\1\107\25\15\11\0\1\15\3\0"+
    "\1\15\2\0\27\15\1\110\1\15\11\0\1\15\3\0"+
    "\1\15\2\0\22\15\1\111\6\15\11\0\1\15\3\0"+
    "\1\15\46\0\1\112\37\0\1\113\47\0\1\114\4\0"+
    "\1\35\10\0\40\115\1\116\1\117\7\115\1\0\31\15"+
    "\6\0\1\120\2\0\1\40\1\120\2\0\1\15\2\0"+
    "\2\15\1\121\26\15\11\0\1\15\3\0\1\15\2\0"+
    "\7\15\1\122\21\15\11\0\1\15\3\0\1\15\2\0"+
    "\10\15\1\123\2\15\1\124\1\125\14\15\11\0\1\15"+
    "\3\0\1\15\2\0\21\15\1\126\7\15\11\0\1\15"+
    "\3\0\1\15\2\0\16\15\1\127\12\15\11\0\1\15"+
    "\3\0\1\15\2\0\5\15\1\63\23\15\11\0\1\15"+
    "\3\0\1\15\2\0\1\63\30\15\11\0\1\15\3\0"+
    "\1\15\2\0\4\15\1\130\24\15\11\0\1\15\3\0"+
    "\1\15\2\0\5\15\1\131\23\15\11\0\1\15\3\0"+
    "\1\15\2\0\23\15\1\132\5\15\11\0\1\15\3\0"+
    "\1\15\2\0\14\15\1\133\14\15\11\0\1\15\3\0"+
    "\1\15\2\0\24\15\1\134\4\15\11\0\1\15\3\0"+
    "\1\15\2\0\6\15\1\135\22\15\11\0\1\15\3\0"+
    "\1\15\2\0\15\15\1\136\13\15\11\0\1\15\3\0"+
    "\1\15\2\0\22\15\1\137\6\15\11\0\1\15\3\0"+
    "\1\15\2\0\1\140\6\15\1\141\1\142\20\15\11\0"+
    "\1\15\3\0\1\15\2\0\4\15\1\143\24\15\11\0"+
    "\1\15\3\0\1\15\2\0\23\15\1\144\5\15\11\0"+
    "\1\15\3\0\1\15\2\0\22\15\1\145\6\15\11\0"+
    "\1\15\3\0\1\15\2\0\1\15\1\146\2\15\1\63"+
    "\3\15\1\147\20\15\11\0\1\15\3\0\1\15\2\0"+
    "\17\15\1\132\11\15\11\0\1\15\3\0\1\15\2\0"+
    "\17\15\1\150\11\15\11\0\1\15\3\0\1\15\2\0"+
    "\12\15\1\63\16\15\11\0\1\15\3\0\1\15\2\0"+
    "\10\15\1\151\6\15\1\152\11\15\11\0\1\15\3\0"+
    "\1\15\2\0\4\15\1\131\24\15\11\0\1\15\3\0"+
    "\1\15\2\0\16\15\1\153\12\15\11\0\1\15\3\0"+
    "\1\15\2\0\5\15\1\121\23\15\11\0\1\15\3\0"+
    "\1\15\2\0\16\15\1\154\12\15\11\0\1\15\3\0"+
    "\1\15\2\0\4\15\1\155\2\15\1\156\21\15\11\0"+
    "\1\15\3\0\1\15\2\0\24\15\1\132\4\15\11\0"+
    "\1\15\3\0\1\15\2\0\13\15\1\132\15\15\11\0"+
    "\1\15\3\0\1\15\2\0\22\15\1\157\6\15\11\0"+
    "\1\15\3\0\1\15\2\0\10\15\1\160\20\15\11\0"+
    "\1\15\3\0\1\15\2\0\1\15\1\161\27\15\11\0"+
    "\1\15\3\0\1\15\2\0\5\15\1\130\23\15\11\0"+
    "\1\15\3\0\1\15\2\0\22\15\1\162\6\15\11\0"+
    "\1\15\3\0\1\15\2\0\1\15\1\163\6\15\1\164"+
    "\20\15\11\0\1\15\3\0\1\15\2\0\2\15\1\165"+
    "\26\15\11\0\1\15\3\0\1\15\2\0\16\15\1\166"+
    "\12\15\11\0\1\15\3\0\1\15\37\0\1\167\52\0"+
    "\1\170\10\0\41\115\1\117\47\115\1\171\1\117\7\115"+
    "\40\0\1\120\2\0\2\120\5\0\3\15\1\172\25\15"+
    "\11\0\1\15\3\0\1\15\2\0\1\173\30\15\11\0"+
    "\1\15\3\0\1\15\2\0\14\15\1\174\14\15\11\0"+
    "\1\15\3\0\1\15\2\0\7\15\1\175\21\15\11\0"+
    "\1\15\3\0\1\15\2\0\13\15\1\176\15\15\11\0"+
    "\1\15\3\0\1\15\2\0\2\15\1\177\26\15\11\0"+
    "\1\15\3\0\1\15\2\0\7\15\1\200\21\15\11\0"+
    "\1\15\3\0\1\15\2\0\2\15\1\201\26\15\11\0"+
    "\1\15\3\0\1\15\2\0\2\15\1\202\26\15\11\0"+
    "\1\15\3\0\1\15\2\0\4\15\1\203\24\15\11\0"+
    "\1\15\3\0\1\15\2\0\10\15\1\136\20\15\11\0"+
    "\1\15\3\0\1\15\2\0\2\15\1\63\26\15\11\0"+
    "\1\15\3\0\1\15\2\0\15\15\1\63\13\15\11\0"+
    "\1\15\3\0\1\15\2\0\16\15\1\204\12\15\11\0"+
    "\1\15\3\0\1\15\2\0\2\15\1\172\26\15\11\0"+
    "\1\15\3\0\1\15\2\0\2\15\1\203\1\205\25\15"+
    "\11\0\1\15\3\0\1\15\2\0\16\15\1\206\12\15"+
    "\11\0\1\15\3\0\1\15\2\0\10\15\1\207\20\15"+
    "\11\0\1\15\3\0\1\15\2\0\16\15\1\210\12\15"+
    "\11\0\1\15\3\0\1\15\2\0\2\15\1\211\26\15"+
    "\11\0\1\15\3\0\1\15\2\0\16\15\1\212\12\15"+
    "\11\0\1\15\3\0\1\15\2\0\10\15\1\63\20\15"+
    "\11\0\1\15\3\0\1\15\2\0\2\15\1\213\26\15"+
    "\11\0\1\15\3\0\1\15\2\0\20\15\1\214\10\15"+
    "\11\0\1\15\3\0\1\15\2\0\17\15\1\215\11\15"+
    "\11\0\1\15\3\0\1\15\2\0\2\15\1\216\17\15"+
    "\1\63\6\15\11\0\1\15\3\0\1\15\2\0\2\15"+
    "\1\217\26\15\11\0\1\15\3\0\1\15\2\0\17\15"+
    "\1\63\11\15\11\0\1\15\3\0\1\15\2\0\7\15"+
    "\1\133\21\15\11\0\1\15\3\0\1\15\2\0\2\15"+
    "\1\220\26\15\11\0\1\15\3\0\1\15\2\0\14\15"+
    "\1\137\14\15\11\0\1\15\3\0\1\15\2\0\1\221"+
    "\30\15\11\0\1\15\3\0\1\15\2\0\14\15\1\222"+
    "\14\15\11\0\1\15\3\0\1\15\2\0\1\15\1\136"+
    "\27\15\11\0\1\15\3\0\1\15\2\0\13\15\1\63"+
    "\15\15\11\0\1\15\3\0\1\15\1\0\46\167\1\223"+
    "\2\167\40\115\1\224\1\117\7\115\1\0\4\15\1\136"+
    "\24\15\11\0\1\15\3\0\1\15\2\0\3\15\1\225"+
    "\25\15\11\0\1\15\3\0\1\15\2\0\17\15\1\166"+
    "\11\15\11\0\1\15\3\0\1\15\2\0\4\15\1\226"+
    "\24\15\11\0\1\15\3\0\1\15\2\0\4\15\1\132"+
    "\24\15\11\0\1\15\3\0\1\15\2\0\1\15\1\227"+
    "\27\15\11\0\1\15\3\0\1\15\2\0\4\15\1\230"+
    "\24\15\11\0\1\15\3\0\1\15\2\0\1\15\1\63"+
    "\27\15\11\0\1\15\3\0\1\15\2\0\17\15\1\210"+
    "\11\15\11\0\1\15\3\0\1\15\2\0\6\15\1\231"+
    "\22\15\11\0\1\15\3\0\1\15\2\0\13\15\1\134"+
    "\15\15\11\0\1\15\3\0\1\15\2\0\2\15\1\232"+
    "\26\15\11\0\1\15\3\0\1\15\2\0\3\15\1\233"+
    "\25\15\11\0\1\15\3\0\1\15\2\0\1\212\30\15"+
    "\11\0\1\15\3\0\1\15\2\0\4\15\1\63\24\15"+
    "\11\0\1\15\3\0\1\15\2\0\1\15\1\234\27\15"+
    "\11\0\1\15\3\0\1\15\2\0\14\15\1\136\14\15"+
    "\11\0\1\15\3\0\1\15\2\0\3\15\1\235\25\15"+
    "\11\0\1\15\3\0\1\15\2\0\23\15\1\236\5\15"+
    "\11\0\1\15\3\0\1\15\2\0\1\15\1\212\27\15"+
    "\11\0\1\15\3\0\1\15\2\0\16\15\1\237\12\15"+
    "\11\0\1\15\3\0\1\15\2\0\27\15\1\240\1\15"+
    "\11\0\1\15\3\0\1\15\2\0\2\15\1\230\26\15"+
    "\11\0\1\15\3\0\1\15\1\0\40\115\1\241\1\117"+
    "\7\115\1\0\5\15\1\136\23\15\11\0\1\15\3\0"+
    "\1\15\2\0\1\15\1\242\27\15\11\0\1\15\3\0"+
    "\1\15\2\0\2\15\1\243\26\15\11\0\1\15\3\0"+
    "\1\15\2\0\7\15\1\63\21\15\11\0\1\15\3\0"+
    "\1\15\2\0\3\15\1\244\25\15\11\0\1\15\3\0"+
    "\1\15\2\0\3\15\1\245\25\15\11\0\1\15\3\0"+
    "\1\15\2\0\10\15\1\203\20\15\11\0\1\15\3\0"+
    "\1\15\2\0\16\15\1\246\12\15\11\0\1\15\3\0"+
    "\1\15\2\0\1\15\1\71\27\15\11\0\1\15\3\0"+
    "\1\15\2\0\2\15\1\247\26\15\11\0\1\15\3\0"+
    "\1\15\2\0\23\15\1\166\5\15\11\0\1\15\3\0"+
    "\1\15\2\0\3\15\1\247\25\15\11\0\1\15\3\0"+
    "\1\15\1\0\36\115\1\250\2\115\1\117\7\115\1\0"+
    "\3\15\1\251\25\15\11\0\1\15\3\0\1\15\2\0"+
    "\13\15\1\252\15\15\11\0\1\15\3\0\1\15\2\0"+
    "\7\15\1\136\21\15\11\0\1\15\3\0\1\15\2\0"+
    "\13\15\1\203\15\15\11\0\1\15\3\0\1\15\2\0"+
    "\1\203\30\15\11\0\1\15\3\0\1\15\2\0\1\15"+
    "\1\203\27\15\11\0\1\15\3\0\1\15\1\0\40\115"+
    "\1\253\1\117\7\115\1\0\16\15\1\254\12\15\11\0"+
    "\1\15\3\0\1\15\2\0\1\222\30\15\11\0\1\15"+
    "\3\0\1\15\1\0\40\115\1\255\1\117\7\115\1\0"+
    "\13\15\1\212\15\15\11\0\1\15\3\0\1\15\1\0"+
    "\36\115\1\256\2\115\1\117\47\115\1\257\1\117\47\115"+
    "\1\260\1\117\50\115\1\261\7\115";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6642];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\26\1\2\11\4\1\1\11\1\1\1\11"+
    "\50\1\1\0\1\11\3\0\1\11\47\1\1\0\1\1"+
    "\1\0\31\1\1\11\1\0\14\1\1\0\6\1\1\0"+
    "\2\1\1\0\1\1\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

// Codigo Java

    private List<Token> tokensList = new ArrayList<>();

    public void addTokenList(Token token) {
        tokensList.add(token);
    }

    public List<Token> getTokensList(){
        return tokensList;
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexycalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 154) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addTokenList( new ErrorToken( yytext(), Color.BLACK, yyline, yycolumn, "Caracter invalido"));
            } 
            // fall through
          case 19: break;
          case 2: 
            { addTokenList( new ErrorToken( yytext(), Color.BLACK, yyline, yycolumn, "Token invalido"));
            } 
            // fall through
          case 20: break;
          case 3: 
            { addTokenList( new Token( yytext(), Kind.Signos, Color.BLACK, yyline, yycolumn));
            } 
            // fall through
          case 21: break;
          case 4: 
            { addTokenList( new Token( yytext(), Kind.Aritmeticos, Color.BLACK, yyline, yycolumn));
            } 
            // fall through
          case 22: break;
          case 5: 
            { addTokenList( new Token( yytext(), Kind.Relacionales, Color.BLACK, yyline, yycolumn));
            } 
            // fall through
          case 23: break;
          case 6: 
            { addTokenList( new Token( yytext(), Kind.Entero, Color.BLUE , yyline, yycolumn));
            } 
            // fall through
          case 24: break;
          case 7: 
            { addTokenList( new Token( yytext(), Kind.Espacio, Color.BLACK, yyline, yycolumn));
            } 
            // fall through
          case 25: break;
          case 8: 
            { addTokenList( new Token( yytext(), Kind.Identificador, new Color(255, 0, 255), yyline, yycolumn));
            } 
            // fall through
          case 26: break;
          case 9: 
            { System.out.print(yytext());
            } 
            // fall through
          case 27: break;
          case 10: 
            { addTokenList( new Token( yytext(), Kind.CREATE, new Color(255, 165, 0) ,yyline,yycolumn));
            } 
            // fall through
          case 28: break;
          case 11: 
            { addTokenList( new Token( yytext(), Kind.Logicos, new Color(255, 165, 0) , yyline, yycolumn));
            } 
            // fall through
          case 29: break;
          case 12: 
            { addTokenList( new Token( yytext(), Kind.Cadena, Color.GREEN, yyline, yycolumn));
            } 
            // fall through
          case 30: break;
          case 13: 
            { addTokenList( new Token( yytext(), Kind.Funciones_de_agregacion, Color.BLUE, yyline, yycolumn));
            } 
            // fall through
          case 31: break;
          case 14: 
            { addTokenList( new Token( yytext(), Kind.Decimal, Color.BLUE , yyline, yycolumn));
            } 
            // fall through
          case 32: break;
          case 15: 
            { addTokenList( new Token( yytext(), Kind.Booleano, Color.BLUE, yyline, yycolumn));
            } 
            // fall through
          case 33: break;
          case 16: 
            { addTokenList( new Token( yytext(), Kind.TIPO_DE_DATO, new Color(128, 0, 128) , yyline, yycolumn));
            } 
            // fall through
          case 34: break;
          case 17: 
            { addTokenList( new Token( yytext(), Kind.Comentario, Color.GRAY, yyline, yycolumn));
            } 
            // fall through
          case 35: break;
          case 18: 
            { addTokenList( new Token( yytext(), Kind.Fecha, Color.YELLOW, yyline, yycolumn));
            } 
            // fall through
          case 36: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java LexycalAnalyzer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        LexycalAnalyzer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new LexycalAnalyzer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
