/* The following code was generated by JFlex 1.7.0 */

package org.lenguajesFP.backend.jflex;

//Seccion de imports
import java.util.ArrayList;
import java.util.List;
import java.awt.Color;

import org.lenguajesFP.backend.Token;
import org.lenguajesFP.backend.ErrorToken;
import org.lenguajesFP.backend.enums.Kind;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lexer.jflex</tt>
 */
public class LexycalAnalyzer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\2\44\1\50\1\52\1\52\1\44\22\0\1\47\6\0\1\43"+
    "\1\32\1\32\1\35\1\35\1\32\1\36\1\33\1\37\12\42\1\0"+
    "\1\32\1\41\1\34\1\41\2\0\1\4\1\7\1\1\1\6\1\3"+
    "\1\22\1\24\1\30\1\17\1\31\1\12\1\11\1\20\1\14\1\23"+
    "\1\16\1\21\1\2\1\10\1\5\1\15\1\26\1\27\1\25\1\13"+
    "\1\51\4\0\1\46\1\0\22\45\1\40\7\45\12\0\1\52\u1fa2\0"+
    "\1\52\1\52\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\26\2\1\3\2\4\1\1\1\5\1\6"+
    "\1\7\1\1\1\10\1\11\6\0\1\12\12\0\1\12"+
    "\21\0\1\13\5\0\1\6\3\0\1\14\10\0\1\13"+
    "\1\15\34\0\1\16\11\0\1\17\1\20\15\0\1\21"+
    "\33\0\1\22";

  private static int [] zzUnpackAction() {
    int [] result = new int[172];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\u0158\0\u0183\0\u01ae\0\u01d9\0\53\0\u0204\0\u022f\0\u025a"+
    "\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387\0\u03b2"+
    "\0\53\0\53\0\u03dd\0\u0408\0\u0433\0\u045e\0\u0489\0\u04b4"+
    "\0\53\0\53\0\u04df\0\u050a\0\u0535\0\u0560\0\u058b\0\u05b6"+
    "\0\u05e1\0\u060c\0\u0637\0\u0662\0\u068d\0\u06b8\0\u06e3\0\u070e"+
    "\0\u0739\0\u0764\0\u078f\0\53\0\u07ba\0\u07e5\0\u0810\0\u083b"+
    "\0\u0866\0\u0891\0\u08bc\0\u08e7\0\u0912\0\u093d\0\u0968\0\u0993"+
    "\0\u09be\0\u09e9\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0\0\u0aeb"+
    "\0\u0b16\0\u0b41\0\u0b6c\0\53\0\u0b97\0\u0bc2\0\u0bed\0\53"+
    "\0\u0c18\0\u0c43\0\u0c6e\0\u0c99\0\u0cc4\0\u0cef\0\u0d1a\0\u0d45"+
    "\0\53\0\53\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1\0\u0e1c\0\u0e47"+
    "\0\u05e1\0\u0e72\0\u0e9d\0\u0ec8\0\u0ef3\0\u0f1e\0\u0f49\0\u0f74"+
    "\0\u0f9f\0\u0fca\0\u0ff5\0\u1020\0\u104b\0\u1076\0\u10a1\0\u10cc"+
    "\0\u10f7\0\u1122\0\u114d\0\u1178\0\u11a3\0\u11ce\0\u0b97\0\u11f9"+
    "\0\u1224\0\u124f\0\u127a\0\u12a5\0\u12d0\0\u12fb\0\u1326\0\u1351"+
    "\0\53\0\53\0\u137c\0\u13a7\0\u13d2\0\u13fd\0\u1428\0\u1453"+
    "\0\u147e\0\u14a9\0\u14d4\0\u14ff\0\u152a\0\u1555\0\u1580\0\53"+
    "\0\u15ab\0\u15d6\0\u1601\0\u162c\0\u1657\0\u1682\0\u16ad\0\u16d8"+
    "\0\u1703\0\u172e\0\u1759\0\u1784\0\u17af\0\u17da\0\u1805\0\u1830"+
    "\0\u185b\0\u1886\0\u18b1\0\u18dc\0\u1907\0\u1932\0\u195d\0\u1988"+
    "\0\u19b3\0\u19de\0\u1a09\0\53";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[172];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\15\1\23\1\24\1\25\1\15\1\26\1\27"+
    "\1\15\1\30\3\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\35\1\2\2\41\1\15\1\42"+
    "\55\0\1\43\1\0\1\44\16\0\1\45\32\0\1\46"+
    "\74\0\1\47\33\0\1\50\1\0\1\51\1\52\2\0"+
    "\1\53\11\0\1\54\26\0\1\55\1\56\1\57\6\0"+
    "\1\60\41\0\1\61\1\62\1\63\61\0\1\64\3\0"+
    "\1\65\3\0\1\66\32\0\1\67\11\0\1\70\54\0"+
    "\1\71\36\0\1\72\64\0\1\73\5\0\1\74\43\0"+
    "\1\75\1\0\1\76\36\0\1\77\64\0\1\100\5\0"+
    "\1\64\34\0\1\101\12\0\1\102\35\0\1\103\1\0"+
    "\1\104\16\0\1\105\31\0\1\106\11\0\1\64\40\0"+
    "\1\107\54\0\1\110\76\0\1\111\45\0\1\112\76\0"+
    "\1\113\43\0\1\32\52\0\1\35\1\0\1\35\2\0"+
    "\2\35\40\0\1\114\51\0\1\115\6\0\1\37\10\0"+
    "\42\116\1\117\1\120\7\116\3\0\1\121\57\0\1\122"+
    "\53\0\1\123\2\0\1\124\1\125\57\0\1\126\47\0"+
    "\1\127\41\0\1\64\45\0\1\64\56\0\1\130\53\0"+
    "\1\131\70\0\1\132\43\0\1\133\62\0\1\134\34\0"+
    "\1\135\61\0\1\136\57\0\1\137\30\0\1\140\6\0"+
    "\1\141\1\142\46\0\1\143\71\0\1\144\51\0\1\145"+
    "\31\0\1\146\2\0\1\64\3\0\1\147\61\0\1\132"+
    "\52\0\1\150\45\0\1\64\50\0\1\151\46\0\1\131"+
    "\64\0\1\152\41\0\1\121\63\0\1\153\40\0\1\154"+
    "\2\0\1\155\67\0\1\132\41\0\1\132\61\0\1\156"+
    "\40\0\1\157\43\0\1\160\56\0\1\130\67\0\1\161"+
    "\31\0\1\162\6\0\1\163\44\0\1\164\66\0\1\165"+
    "\71\0\1\166\56\0\1\167\10\0\43\116\1\120\51\116"+
    "\1\170\1\120\7\116\4\0\1\171\47\0\1\172\66\0"+
    "\1\173\45\0\1\174\56\0\1\175\41\0\1\176\57\0"+
    "\1\177\45\0\1\200\52\0\1\201\54\0\1\202\56\0"+
    "\1\136\44\0\1\64\65\0\1\64\53\0\1\203\36\0"+
    "\1\171\52\0\1\202\1\204\65\0\1\205\44\0\1\206"+
    "\60\0\1\207\36\0\1\210\66\0\1\177\44\0\1\64"+
    "\62\0\1\211\51\0\1\212\35\0\1\213\17\0\1\64"+
    "\32\0\1\214\67\0\1\64\42\0\1\133\45\0\1\215"+
    "\64\0\1\137\36\0\1\216\66\0\1\217\37\0\1\136"+
    "\64\0\1\64\36\0\50\166\1\220\2\166\42\116\1\221"+
    "\1\120\7\116\5\0\1\136\51\0\1\222\66\0\1\165"+
    "\37\0\1\223\52\0\1\132\47\0\1\224\55\0\1\64"+
    "\47\0\1\64\70\0\1\207\41\0\1\225\57\0\1\134"+
    "\41\0\1\226\53\0\1\227\47\0\1\177\66\0\1\136"+
    "\41\0\1\230\72\0\1\231\30\0\1\177\67\0\1\232"+
    "\63\0\1\233\25\0\1\234\47\0\42\116\1\235\1\120"+
    "\7\116\6\0\1\136\46\0\1\236\53\0\1\237\53\0"+
    "\1\240\52\0\1\241\57\0\1\202\43\0\1\72\53\0"+
    "\1\242\73\0\1\165\32\0\1\242\56\0\1\64\42\0"+
    "\36\116\1\243\4\116\1\120\7\116\4\0\1\244\62\0"+
    "\1\245\46\0\1\136\56\0\1\202\40\0\1\202\50\0"+
    "\42\116\1\246\1\120\7\116\17\0\1\247\34\0\1\217"+
    "\51\0\42\116\1\250\1\120\7\116\14\0\1\177\36\0"+
    "\36\116\1\251\4\116\1\120\51\116\1\252\1\120\51\116"+
    "\1\253\1\120\52\116\1\254\7\116";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6708];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\12\1\1\11\13\1\2\11\6\1\2\11"+
    "\6\0\1\1\12\0\1\11\21\0\1\1\5\0\1\11"+
    "\3\0\1\11\10\0\2\11\34\0\1\1\11\0\2\11"+
    "\15\0\1\11\33\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[172];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

// Codigo Java

    private List<Token> tokensList = new ArrayList<>();

    public void addTokenList(Token token) {
        tokensList.add(token);
    }

    public List<Token> getTokensList(){
        return tokensList;
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexycalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addTokenList( new ErrorToken( yytext(), Color.BLACK, yyline, yycolumn, "Caracter invalido"));
            } 
            // fall through
          case 19: break;
          case 2: 
            { addTokenList( new ErrorToken( yytext(), Color.BLACK, yyline, yycolumn, "Token invalido"));
            } 
            // fall through
          case 20: break;
          case 3: 
            { addTokenList( new Token( yytext(), Kind.Signos, Color.BLACK, yyline, yycolumn));
            } 
            // fall through
          case 21: break;
          case 4: 
            { addTokenList( new Token( yytext(), Kind.Aritmeticos, Color.BLACK, yyline, yycolumn));
            } 
            // fall through
          case 22: break;
          case 5: 
            { addTokenList( new Token( yytext(), Kind.Identificador, new Color(255, 0, 255), yyline, yycolumn));
            } 
            // fall through
          case 23: break;
          case 6: 
            { addTokenList( new Token( yytext(), Kind.Relacionales, Color.BLACK, yyline, yycolumn));
            } 
            // fall through
          case 24: break;
          case 7: 
            { addTokenList( new Token( yytext(), Kind.Entero, Color.BLUE , yyline, yycolumn));
            } 
            // fall through
          case 25: break;
          case 8: 
            { addTokenList( new Token( yytext(), Kind.Espacio, Color.BLACK, yyline, yycolumn));
            } 
            // fall through
          case 26: break;
          case 9: 
            { System.out.print(yytext());
            } 
            // fall through
          case 27: break;
          case 10: 
            { addTokenList( new Token( yytext(), Kind.CREATE, new Color(255, 165, 0) ,yyline,yycolumn));
            } 
            // fall through
          case 28: break;
          case 11: 
            { addTokenList( new Token( yytext(), Kind.Logicos, new Color(255, 165, 0) , yyline, yycolumn));
            } 
            // fall through
          case 29: break;
          case 12: 
            { addTokenList( new Token( yytext(), Kind.Cadena, Color.GREEN, yyline, yycolumn));
            } 
            // fall through
          case 30: break;
          case 13: 
            { addTokenList( new Token( yytext(), Kind.Funciones_de_agregacion, Color.BLUE, yyline, yycolumn));
            } 
            // fall through
          case 31: break;
          case 14: 
            { addTokenList( new Token( yytext(), Kind.Decimal, Color.BLUE , yyline, yycolumn));
            } 
            // fall through
          case 32: break;
          case 15: 
            { addTokenList( new Token( yytext(), Kind.Booleano, Color.BLUE, yyline, yycolumn));
            } 
            // fall through
          case 33: break;
          case 16: 
            { addTokenList( new Token( yytext(), Kind.TIPO_DE_DATO, new Color(128, 0, 128) , yyline, yycolumn));
            } 
            // fall through
          case 34: break;
          case 17: 
            { addTokenList( new Token( yytext(), Kind.Comentario, Color.GRAY, yyline, yycolumn));
            } 
            // fall through
          case 35: break;
          case 18: 
            { addTokenList( new Token( yytext(), Kind.Fecha, Color.YELLOW, yyline, yycolumn));
            } 
            // fall through
          case 36: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java LexycalAnalyzer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        LexycalAnalyzer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new LexycalAnalyzer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
